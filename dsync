#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# adapted from http://www.danplanet.com/blog/2012/05/09/low-latency-continuous-rsync/
# Intended to sync a local directory to a remote server, using rsync to update a
# file whenever a filesystem event is caught. Intended to be run in a git
# repository, it will ignore changes to any files or directories that are
# include in a .gitignore file.

# Using watchman instead of inotify-tools to be able to run on macos as well as linux
# Run as: sync $path_to_sync $destination
# where $destination can be a remote host
#
# Significantly lower latency acheived by using ssh connection multiplexing with
# the remote destination. In your ssh config for your desired host, add:
# Host myhost.domain.com
#     ControlMaster auto
#     ControlPath $HOME/.ssh/controlmasters/%h%p%r

DEST="$1"

if [ -z "$DEST" ]; then exit 1; fi

array_contains() {
	local array="$1[@]"
	local seeking=$2
	local in=1
	for element in "${!array}"; do
		if [[ $element == "$seeking" ]]; then
			in=0
			break
		fi
	done
	return $in
}

declare -a exclude_files=(".git" ".empty" "index.lock")

watchman-wait --max-events 0 . |
	while read -r file; do
		if git check-ignore "$file" || array_contains exclude_files "$file"; then
			echo "$file is ignored"
		else
			echo "$file"
			rsync -azvq \
				--exclude=".git/" \
				--exclude=".empty" \
				"$file" "${DEST}"/"$file"
			echo -n 'Completed at '
			date
		fi
	done
